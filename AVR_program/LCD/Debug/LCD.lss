
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000528  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00000528  000005bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000c0  008000c0  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbb  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003da  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050d  00000000  00000000  00001b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036f  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf9  00000000  00000000  00002627  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ec       	ldi	r26, 0xC0	; 192
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3c       	cpi	r26, 0xC3	; 195
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  8a:	0c 94 92 02 	jmp	0x524	; 0x524 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write>:
        bcd4 += ((bcd&0x8000)?1:0);
        bcd <<= 1;
        bcd += ((num&(1<<(i-1)))?1:0);
    }
	
    lcd_putch((bcd4)?(chex[bcd4]):' ');    
  92:	95 ed       	ldi	r25, 0xD5	; 213
  94:	9a 95       	dec	r25
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_write+0x2>
  98:	00 00       	nop
  9a:	88 23       	and	r24, r24
  9c:	14 f4       	brge	.+4      	; 0xa2 <lcd_write+0x10>
  9e:	ae 9a       	sbi	0x15, 6	; 21
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <lcd_write+0x12>
  a2:	ae 98       	cbi	0x15, 6	; 21
    lcd_putch((!bcd4 && bcd<0x1000)	?' ':(pgm_read_byte(&chex[bcd>>12])));
  a4:	86 ff       	sbrs	r24, 6
  a6:	02 c0       	rjmp	.+4      	; 0xac <lcd_write+0x1a>
  a8:	ad 9a       	sbi	0x15, 5	; 21
  aa:	01 c0       	rjmp	.+2      	; 0xae <lcd_write+0x1c>
  ac:	ad 98       	cbi	0x15, 5	; 21
  ae:	85 ff       	sbrs	r24, 5
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <lcd_write+0x24>
  b2:	ac 9a       	sbi	0x15, 4	; 21
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <lcd_write+0x26>
  b6:	ac 98       	cbi	0x15, 4	; 21
    lcd_putch((!bcd4 && bcd<0x100)	?' ':(pgm_read_byte(&chex[(bcd>>8)&0x000F])));
  b8:	84 ff       	sbrs	r24, 4
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <lcd_write+0x2e>
  bc:	ab 9a       	sbi	0x15, 3	; 21
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0x30>
  c0:	ab 98       	cbi	0x15, 3	; 21
  c2:	aa 9a       	sbi	0x15, 2	; 21
  c4:	aa 98       	cbi	0x15, 2	; 21
  c6:	83 ff       	sbrs	r24, 3
  c8:	02 c0       	rjmp	.+4      	; 0xce <lcd_write+0x3c>
  ca:	ae 9a       	sbi	0x15, 6	; 21
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <lcd_write+0x3e>
  ce:	ae 98       	cbi	0x15, 6	; 21
  d0:	82 ff       	sbrs	r24, 2
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <lcd_write+0x46>
  d4:	ad 9a       	sbi	0x15, 5	; 21
    lcd_putch((!bcd4 && bcd<0x10)	?' ':(pgm_read_byte(&chex[(bcd>>4)&0x000F])));
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_write+0x48>
  d8:	ad 98       	cbi	0x15, 5	; 21
  da:	81 ff       	sbrs	r24, 1
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <lcd_write+0x50>
  de:	ac 9a       	sbi	0x15, 4	; 21
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <lcd_write+0x52>
  e2:	ac 98       	cbi	0x15, 4	; 21
  e4:	80 ff       	sbrs	r24, 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <lcd_write+0x5a>
  e8:	ab 9a       	sbi	0x15, 3	; 21
  ea:	01 c0       	rjmp	.+2      	; 0xee <lcd_write+0x5c>
  ec:	ab 98       	cbi	0x15, 3	; 21
  ee:	aa 9a       	sbi	0x15, 2	; 21
  f0:	aa 98       	cbi	0x15, 2	; 21
  f2:	08 95       	ret

000000f4 <lcd_clear>:
  f4:	a8 98       	cbi	0x15, 0	; 21
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9f e1       	ldi	r25, 0x1F	; 31
    lcd_putch(pgm_read_byte(&chex[bcd&0x000F]));	
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_clear+0xc>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_clear+0x12>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <lcd_puts>:
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
 110:	a8 9a       	sbi	0x15, 0	; 21
        bcd4 += ((bcd&0x8000)?1:0);
        bcd <<= 1;
        bcd += ((num&(1<<(i-1)))?1:0);
    }
	
    lcd_putch((bcd4)?(chex[bcd4]):' ');    
 112:	88 81       	ld	r24, Y
 114:	88 23       	and	r24, r24
 116:	31 f0       	breq	.+12     	; 0x124 <lcd_puts+0x1a>
    lcd_putch((!bcd4 && bcd<0x1000)	?' ':(pgm_read_byte(&chex[bcd>>12])));
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 11e:	89 91       	ld	r24, Y+
 120:	81 11       	cpse	r24, r1
 122:	fb cf       	rjmp	.-10     	; 0x11a <lcd_puts+0x10>
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_putch>:
    lcd_putch((!bcd4 && bcd<0x100)	?' ':(pgm_read_byte(&chex[(bcd>>8)&0x000F])));
 12a:	a8 9a       	sbi	0x15, 0	; 21
 12c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 130:	08 95       	ret

00000132 <lcd_goto>:
    lcd_putch((!bcd4 && bcd<0x10)	?' ':(pgm_read_byte(&chex[(bcd>>4)&0x000F])));
    lcd_putch(pgm_read_byte(&chex[bcd&0x000F]));	
}	
 132:	a8 98       	cbi	0x15, 0	; 21
 134:	80 68       	ori	r24, 0x80	; 128
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_init>:
 13c:	a0 9a       	sbi	0x14, 0	; 20


void lcd_init()
{
	DDR(LCD_RS_PORT) |= (1 << LCD_RS_PIN);
	DDR(LCD_EN_PORT) |= (1 << LCD_EN_PIN);
 13e:	a2 9a       	sbi	0x14, 2	; 20
	
	DDR(LCD_D7_PORT) |= (1 << LCD_D7_PIN);
 140:	a6 9a       	sbi	0x14, 6	; 20
	DDR(LCD_D6_PORT) |= (1 << LCD_D6_PIN);
 142:	a5 9a       	sbi	0x14, 5	; 20
	DDR(LCD_D5_PORT) |= (1 << LCD_D5_PIN);
 144:	a4 9a       	sbi	0x14, 4	; 20
	DDR(LCD_D4_PORT) |= (1 << LCD_D4_PIN);
 146:	a3 9a       	sbi	0x14, 3	; 20
	
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
 148:	a8 98       	cbi	0x15, 0	; 21
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);
 14a:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	8f e5       	ldi	r24, 0x5F	; 95
 14e:	9a ee       	ldi	r25, 0xEA	; 234
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x14>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x1a>
 156:	00 00       	nop
	
	_delay_ms(15);	// wait 15mSec after power applied,

	LCD_D4_PORT |= (1 << LCD_D4_PIN);//0x3 & 0x01;				//bit0 000X
 158:	ab 9a       	sbi	0x15, 3	; 21
	LCD_D5_PORT |= (1 << LCD_D5_PIN);//(0x3>>1) & 0x01;		//bit1 00XY -> 000X
 15a:	ac 9a       	sbi	0x15, 4	; 21
	LCD_D6_PORT &= ~(1 << LCD_D6_PIN);//(0x3>>2) & 0x01;		//bit2 0XYZ -> 000X
 15c:	ad 98       	cbi	0x15, 5	; 21
	LCD_D7_PORT &= ~(1 << LCD_D7_PIN);//(0x3>>3) & 0x01;		//bit3 XYZW -> 000X
 15e:	ae 98       	cbi	0x15, 6	; 21
	
	LCD_STROBE();
 160:	aa 9a       	sbi	0x15, 2	; 21
 162:	aa 98       	cbi	0x15, 2	; 21
 164:	8f e1       	ldi	r24, 0x1F	; 31
 166:	9e e4       	ldi	r25, 0x4E	; 78
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_init+0x2c>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_init+0x32>
 16e:	00 00       	nop
	_delay_ms(5);
	LCD_STROBE();
 170:	aa 9a       	sbi	0x15, 2	; 21
 172:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e1       	ldi	r24, 0x1F	; 31
 176:	93 e0       	ldi	r25, 0x03	; 3
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_init+0x3c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_init+0x42>
 17e:	00 00       	nop
	_delay_us(200);
	LCD_STROBE();
 180:	aa 9a       	sbi	0x15, 2	; 21
 182:	aa 98       	cbi	0x15, 2	; 21
 184:	8f e1       	ldi	r24, 0x1F	; 31
 186:	93 e0       	ldi	r25, 0x03	; 3
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x4c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init+0x52>
 18e:	00 00       	nop
	_delay_us(200);
	
	// Four bit mode 
	LCD_D4_PORT &= ~(1 << LCD_D4_PIN);	//2 & 0x01
 190:	ab 98       	cbi	0x15, 3	; 21
	LCD_D5_PORT |=  (1 << LCD_D5_PIN);	//(2>>1) & 0x01
 192:	ac 9a       	sbi	0x15, 4	; 21
	LCD_D6_PORT &= ~(1 << LCD_D6_PIN);	//(2>>2) & 0x01
 194:	ad 98       	cbi	0x15, 5	; 21
	LCD_D7_PORT &= ~(1 << LCD_D7_PIN);	//(2>>3) & 0x01
 196:	ae 98       	cbi	0x15, 6	; 21
	
	LCD_STROBE();
 198:	aa 9a       	sbi	0x15, 2	; 21
 19a:	aa 98       	cbi	0x15, 2	; 21

	lcd_write(0x28);		// Set interface length: nibblemode, 2line, 5x7dot
 19c:	88 e2       	ldi	r24, 0x28	; 40
 19e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	lcd_write(0b00001100);	// Display On, Cursor Off, Cursor Blink off
 1a2:	8c e0       	ldi	r24, 0x0C	; 12
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	lcd_clear();			// Clear screen
 1a8:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_clear>
	lcd_write(0x6);			// Set entry Mode : increment, displayShiftOff
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 1b2:	08 95       	ret

000001b4 <lcd_num>:
    lcd_putch((!bcd4 && bcd<0x10)	?' ':(pgm_read_byte(&chex[(bcd>>4)&0x000F])));
    lcd_putch(pgm_read_byte(&chex[bcd&0x000F]));	
}	

void lcd_num( int num )
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <lcd_num+0x6>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <lcd_num+0x8>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <lcd_num+0xa>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1c2:	4a e0       	ldi	r20, 0x0A	; 10
 1c4:	be 01       	movw	r22, r28
 1c6:	6f 5f       	subi	r22, 0xFF	; 255
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ca:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__itoa_ncheck>
	char str[6];
	itoa( num, str, 10 );
	lcd_puts( str );
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_puts>
}
 1d6:	26 96       	adiw	r28, 0x06	; 6
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <Printf>:
{
	lcd_goto( y*64+x );
}

void Printf( char *fmt,... )
{
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	fe 01       	movw	r30, r28
 1fe:	3b 96       	adiw	r30, 0x0b	; 11
 200:	01 91       	ld	r16, Z+
 202:	11 91       	ld	r17, Z+
	va_list aptr;
	char *p, *sval, str[17],ch;
	int ival;
	va_start( aptr, fmt );
 204:	6f 01       	movw	r12, r30
	
	for( p=fmt; *p ; ++p )
 206:	f8 01       	movw	r30, r16
 208:	80 81       	ld	r24, Z
 20a:	88 23       	and	r24, r24
 20c:	c1 f1       	breq	.+112    	; 0x27e <Printf+0x96>
	if( *p=='%' )
 20e:	85 32       	cpi	r24, 0x25	; 37
 210:	61 f5       	brne	.+88     	; 0x26a <Printf+0x82>
	switch( * ++p )
 212:	78 01       	movw	r14, r16
 214:	ff ef       	ldi	r31, 0xFF	; 255
 216:	ef 1a       	sub	r14, r31
 218:	ff 0a       	sbc	r15, r31
 21a:	f8 01       	movw	r30, r16
 21c:	81 81       	ldd	r24, Z+1	; 0x01
 21e:	84 36       	cpi	r24, 0x64	; 100
 220:	19 f0       	breq	.+6      	; 0x228 <Printf+0x40>
 222:	83 37       	cpi	r24, 0x73	; 115
 224:	51 f0       	breq	.+20     	; 0x23a <Printf+0x52>
 226:	1e c0       	rjmp	.+60     	; 0x264 <Printf+0x7c>
	{
		case 'd':
		ival = va_arg( aptr, int );
 228:	f6 01       	movw	r30, r12
		lcd_num( ival );
 22a:	80 81       	ld	r24, Z
 22c:	91 81       	ldd	r25, Z+1	; 0x01
 22e:	f2 e0       	ldi	r31, 0x02	; 2
 230:	cf 0e       	add	r12, r31
 232:	d1 1c       	adc	r13, r1
 234:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_num>
		break;
 238:	1b c0       	rjmp	.+54     	; 0x270 <Printf+0x88>
		
		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
 23a:	f6 01       	movw	r30, r12
 23c:	01 90       	ld	r0, Z+
 23e:	f0 81       	ld	r31, Z
 240:	e0 2d       	mov	r30, r0
 242:	22 e0       	ldi	r18, 0x02	; 2
 244:	c2 0e       	add	r12, r18
 246:	d1 1c       	adc	r13, r1
 248:	80 81       	ld	r24, Z
 24a:	88 23       	and	r24, r24
 24c:	89 f0       	breq	.+34     	; 0x270 <Printf+0x88>
 24e:	8f 01       	movw	r16, r30
 250:	0f 5f       	subi	r16, 0xFF	; 255
 252:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_putch( *sval );
 254:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_putch>
		ival = va_arg( aptr, int );
		lcd_num( ival );
		break;
		
		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
 258:	f8 01       	movw	r30, r16
 25a:	81 91       	ld	r24, Z+
 25c:	8f 01       	movw	r16, r30
 25e:	81 11       	cpse	r24, r1
 260:	f9 cf       	rjmp	.-14     	; 0x254 <Printf+0x6c>
 262:	06 c0       	rjmp	.+12     	; 0x270 <Printf+0x88>
		lcd_putch( *sval );
		break;
		
		
		default:
		lcd_putch(*p);
 264:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_putch>
 268:	03 c0       	rjmp	.+6      	; 0x270 <Printf+0x88>
		
		
	}
	else
	lcd_putch( *p );		
 26a:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_putch>
 26e:	78 01       	movw	r14, r16
	va_list aptr;
	char *p, *sval, str[17],ch;
	int ival;
	va_start( aptr, fmt );
	
	for( p=fmt; *p ; ++p )
 270:	87 01       	movw	r16, r14
 272:	0f 5f       	subi	r16, 0xFF	; 255
 274:	1f 4f       	sbci	r17, 0xFF	; 255
 276:	f7 01       	movw	r30, r14
 278:	81 81       	ldd	r24, Z+1	; 0x01
 27a:	81 11       	cpse	r24, r1
 27c:	c8 cf       	rjmp	.-112    	; 0x20e <Printf+0x26>
		
		
	}
	else
	lcd_putch( *p );		
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	08 95       	ret

00000290 <USART_Init>:
char bac[16] = {"--->>BACK<<---"};
	
	
void USART_Init()
{
	UBRRL = bauD;
 290:	87 e6       	ldi	r24, 0x67	; 103
 292:	89 b9       	out	0x09, r24	; 9
	UBRRH = (bauD>>8);
 294:	10 bc       	out	0x20, r1	; 32
	UCSRB = ((1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE));
 296:	88 ed       	ldi	r24, 0xD8	; 216
 298:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1));
 29a:	86 e8       	ldi	r24, 0x86	; 134
 29c:	80 bd       	out	0x20, r24	; 32
 29e:	08 95       	ret

000002a0 <Init_Pwm>:
	}
}

void Init_Pwm()
{
	Motor_ddr |= ( (1<<Motor1_pwm) | (1<<Motor2_pwm) ); //ocr1b,ocr1a
 2a0:	81 b3       	in	r24, 0x11	; 17
 2a2:	80 63       	ori	r24, 0x30	; 48
 2a4:	81 bb       	out	0x11, r24	; 17
	Motor_ddr |= ( (1<<Motor1_Dir1) | (1<<Motor1_Dir2) | (1<<Motor2_Dir1) | (1<<Motor2_Dir2));  //direction
 2a6:	81 b3       	in	r24, 0x11	; 17
 2a8:	8c 6c       	ori	r24, 0xCC	; 204
 2aa:	81 bb       	out	0x11, r24	; 17
	Motor_port &=~ ( (1<<Motor1_Dir1)|(1<<Motor1_Dir2)|(1<<Motor1_pwm)|(1<<Motor2_pwm)|(1<<Motor2_Dir1)|(1<<Motor2_Dir2));
 2ac:	82 b3       	in	r24, 0x12	; 18
 2ae:	83 70       	andi	r24, 0x03	; 3
 2b0:	82 bb       	out	0x12, r24	; 18
	TCCR1A |= ( (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11));
 2b2:	8f b5       	in	r24, 0x2f	; 47
 2b4:	82 6a       	ori	r24, 0xA2	; 162
 2b6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= ( (1<<CS10) | (1<<WGM12) | (1<<WGM13) );
 2b8:	8e b5       	in	r24, 0x2e	; 46
 2ba:	89 61       	ori	r24, 0x19	; 25
 2bc:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 3200;
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	9c e0       	ldi	r25, 0x0C	; 12
 2c2:	97 bd       	out	0x27, r25	; 39
 2c4:	86 bd       	out	0x26, r24	; 38
 2c6:	08 95       	ret

000002c8 <disp_lcd>:
}

void disp_lcd(char *data)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	c8 2f       	mov	r28, r24
 2ce:	d9 2f       	mov	r29, r25
	lcd_clear();
 2d0:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_clear>
	lcd_puts( str );
}

void lcd_gotoxy( unsigned char x, unsigned char y )
{
	lcd_goto( y*64+x );
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 99 00 	call	0x132	; 0x132 <lcd_goto>
	lcd_gotoxy(0,0);
	Printf("Say Smth......");
 2da:	20 eb       	ldi	r18, 0xB0	; 176
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	3f 93       	push	r19
 2e0:	2f 93       	push	r18
 2e2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Printf>
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	0e 94 99 00 	call	0x132	; 0x132 <lcd_goto>
	lcd_gotoxy(0,1);
	Printf(data);
 2ec:	df 93       	push	r29
 2ee:	cf 93       	push	r28
 2f0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	80 e7       	ldi	r24, 0x70	; 112
 2f8:	92 e0       	ldi	r25, 0x02	; 2
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <disp_lcd+0x32>
 302:	00 c0       	rjmp	.+0      	; 0x304 <disp_lcd+0x3c>
 304:	00 00       	nop
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
	_delay_ms(50);
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <forward_func>:

void forward_func()
{
	disp_lcd(start);
 314:	80 ea       	ldi	r24, 0xA0	; 160
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disp_lcd>
	Motor_port |= ((1<<Motor1_Dir1)| (1<<Motor2_Dir1));
 31c:	82 b3       	in	r24, 0x12	; 18
 31e:	84 64       	ori	r24, 0x44	; 68
 320:	82 bb       	out	0x12, r24	; 18
	Motor_port &= ~ ((1<<Motor1_Dir2)| (1<<Motor2_Dir2));
 322:	82 b3       	in	r24, 0x12	; 18
 324:	87 77       	andi	r24, 0x77	; 119
 326:	82 bb       	out	0x12, r24	; 18
	OCR1A=1600;
 328:	80 e4       	ldi	r24, 0x40	; 64
 32a:	96 e0       	ldi	r25, 0x06	; 6
 32c:	9b bd       	out	0x2b, r25	; 43
 32e:	8a bd       	out	0x2a, r24	; 42
	OCR1B=3000;
 330:	88 eb       	ldi	r24, 0xB8	; 184
 332:	9b e0       	ldi	r25, 0x0B	; 11
 334:	99 bd       	out	0x29, r25	; 41
 336:	88 bd       	out	0x28, r24	; 40
	light_port |= (1<<L_Start);
 338:	d9 9a       	sbi	0x1b, 1	; 27
	light_port &=~ (1<<L_Stop);
 33a:	dd 98       	cbi	0x1b, 5	; 27
 33c:	08 95       	ret

0000033e <backward_func>:
}

void backward_func()
{
	disp_lcd(bac);
 33e:	80 e6       	ldi	r24, 0x60	; 96
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disp_lcd>
	Motor_port |= ((1<<Motor1_Dir2)| (1<<Motor2_Dir2));
 346:	82 b3       	in	r24, 0x12	; 18
 348:	88 68       	ori	r24, 0x88	; 136
 34a:	82 bb       	out	0x12, r24	; 18
	Motor_port &= ~ ((1<<Motor1_Dir1)| (1<<Motor2_Dir1));
 34c:	82 b3       	in	r24, 0x12	; 18
 34e:	8b 7b       	andi	r24, 0xBB	; 187
 350:	82 bb       	out	0x12, r24	; 18
	OCR1A=1600;
 352:	80 e4       	ldi	r24, 0x40	; 64
 354:	96 e0       	ldi	r25, 0x06	; 6
 356:	9b bd       	out	0x2b, r25	; 43
 358:	8a bd       	out	0x2a, r24	; 42
	OCR1B=3000;
 35a:	88 eb       	ldi	r24, 0xB8	; 184
 35c:	9b e0       	ldi	r25, 0x0B	; 11
 35e:	99 bd       	out	0x29, r25	; 41
 360:	88 bd       	out	0x28, r24	; 40
 362:	08 95       	ret

00000364 <left_func>:
}

void left_func()
{
	disp_lcd(left);
 364:	80 e8       	ldi	r24, 0x80	; 128
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disp_lcd>
	Motor_port |= (1<<Motor1_Dir1);
 36c:	92 9a       	sbi	0x12, 2	; 18
	Motor_port &=~ (1<<Motor1_Dir2);
 36e:	93 98       	cbi	0x12, 3	; 18
	Motor_port &=~ ((1<<Motor2_Dir2)|(1<<Motor2_Dir1));
 370:	82 b3       	in	r24, 0x12	; 18
 372:	8f 73       	andi	r24, 0x3F	; 63
 374:	82 bb       	out	0x12, r24	; 18
	OCR1B=3000;
 376:	88 eb       	ldi	r24, 0xB8	; 184
 378:	9b e0       	ldi	r25, 0x0B	; 11
 37a:	99 bd       	out	0x29, r25	; 41
 37c:	88 bd       	out	0x28, r24	; 40
	OCR1A=0;
 37e:	1b bc       	out	0x2b, r1	; 43
 380:	1a bc       	out	0x2a, r1	; 42
 382:	08 95       	ret

00000384 <right_func>:
}

void right_func()
{
	disp_lcd(right);
 384:	80 e7       	ldi	r24, 0x70	; 112
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disp_lcd>
	Motor_port |= ((1<<Motor2_Dir1));
 38c:	96 9a       	sbi	0x12, 6	; 18
	Motor_port &=~ ((1<<Motor2_Dir2));
 38e:	97 98       	cbi	0x12, 7	; 18
	Motor_port &=~((1<<Motor1_Dir1)|(1<<Motor1_Dir2));
 390:	82 b3       	in	r24, 0x12	; 18
 392:	83 7f       	andi	r24, 0xF3	; 243
 394:	82 bb       	out	0x12, r24	; 18
	OCR1B=0;
 396:	19 bc       	out	0x29, r1	; 41
 398:	18 bc       	out	0x28, r1	; 40
	OCR1A=1600;
 39a:	80 e4       	ldi	r24, 0x40	; 64
 39c:	96 e0       	ldi	r25, 0x06	; 6
 39e:	9b bd       	out	0x2b, r25	; 43
 3a0:	8a bd       	out	0x2a, r24	; 42
 3a2:	08 95       	ret

000003a4 <stop_func>:
}

void stop_func()
{
	disp_lcd(stop);
 3a4:	80 e9       	ldi	r24, 0x90	; 144
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disp_lcd>
	Motor_port &=~((1<<Motor2_Dir1)|(1<<Motor2_Dir2)|(1<<Motor1_Dir1)|(1<<Motor1_Dir2));
 3ac:	82 b3       	in	r24, 0x12	; 18
 3ae:	83 73       	andi	r24, 0x33	; 51
 3b0:	82 bb       	out	0x12, r24	; 18
	OCR1A=0;
 3b2:	1b bc       	out	0x2b, r1	; 43
 3b4:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0;
 3b6:	19 bc       	out	0x29, r1	; 41
 3b8:	18 bc       	out	0x28, r1	; 40
	light_port &=~ (1<<L_Start);
 3ba:	d9 98       	cbi	0x1b, 1	; 27
	light_port |= (1<<L_Stop);
 3bc:	dd 9a       	sbi	0x1b, 5	; 27
 3be:	08 95       	ret

000003c0 <main>:
	light_port &=~ (1<<L_TX);
}

int main(void)
{	
	Light_ddr |= ((1<<L_Car_On)|(1<<L_Start)|(1<<L_Back)|(1<<L_Right)|(1<<L_Left)|(1<<L_Stop)|(1<<L_TX)|(1<<L_RX));
 3c0:	8a b3       	in	r24, 0x1a	; 26
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	8a bb       	out	0x1a, r24	; 26
	USART_Init();
 3c6:	0e 94 48 01 	call	0x290	; 0x290 <USART_Init>
	lcd_init();
 3ca:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_init>
	Init_Pwm();
 3ce:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Init_Pwm>
	sei();
 3d2:	78 94       	sei
	disp_lcd(stop);
 3d4:	80 e9       	ldi	r24, 0x90	; 144
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disp_lcd>
		{
			light_port &=~ (1<<L_Stop);
			light_port |= (1<<L_Back);
			backward_func();
			_delay_ms(4000);
			BUFFER='q';
 3dc:	11 e7       	ldi	r17, 0x71	; 113
			BUFFER='f';
			light_port &=~ (1<<L_Right);
		}
		else if (BUFFER=='q')
		{
			Stop_Flag=1;
 3de:	c1 e0       	ldi	r28, 0x01	; 1
		{		
			light_port &=~ (1<<L_Left);
			light_port |= (1<<L_Right);
			right_func();
			_delay_ms(4000);
			BUFFER='f';
 3e0:	d6 e6       	ldi	r29, 0x66	; 102
	sei();
	disp_lcd(stop);
	
	while(1)
	{
		light_port |=(1<<L_Car_On);
 3e2:	d8 9a       	sbi	0x1b, 0	; 27
		if (BUFFER=='f')
 3e4:	80 91 c2 00 	lds	r24, 0x00C2
 3e8:	86 36       	cpi	r24, 0x66	; 102
 3ea:	29 f4       	brne	.+10     	; 0x3f6 <main+0x36>
		{
			Forward_Flag=1;
 3ec:	c0 93 c1 00 	sts	0x00C1, r28
			forward_func();
 3f0:	0e 94 8a 01 	call	0x314	; 0x314 <forward_func>
 3f4:	f6 cf       	rjmp	.-20     	; 0x3e2 <main+0x22>
		}
		else if ((BUFFER=='l')&&(Forward_Flag))
 3f6:	8c 36       	cpi	r24, 0x6C	; 108
 3f8:	a9 f4       	brne	.+42     	; 0x424 <main+0x64>
 3fa:	80 91 c1 00 	lds	r24, 0x00C1
 3fe:	88 23       	and	r24, r24
 400:	81 f3       	breq	.-32     	; 0x3e2 <main+0x22>
		{
			light_port &=~ (1<<L_Right);
 402:	db 98       	cbi	0x1b, 3	; 27
			light_port |= (1<<L_Left);
 404:	dc 9a       	sbi	0x1b, 4	; 27
			left_func();
 406:	0e 94 b2 01 	call	0x364	; 0x364 <left_func>
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	8f e4       	ldi	r24, 0x4F	; 79
 40e:	93 ec       	ldi	r25, 0xC3	; 195
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <main+0x50>
 418:	00 c0       	rjmp	.+0      	; 0x41a <main+0x5a>
 41a:	00 00       	nop
			_delay_ms(4000);
			BUFFER= 'f' ;
 41c:	d0 93 c2 00 	sts	0x00C2, r29
			light_port &=~ (1<<L_Left);
 420:	dc 98       	cbi	0x1b, 4	; 27
 422:	df cf       	rjmp	.-66     	; 0x3e2 <main+0x22>
		}
		else if ((BUFFER=='r')&&(Forward_Flag))
 424:	82 37       	cpi	r24, 0x72	; 114
 426:	a9 f4       	brne	.+42     	; 0x452 <main+0x92>
 428:	80 91 c1 00 	lds	r24, 0x00C1
 42c:	88 23       	and	r24, r24
 42e:	c9 f2       	breq	.-78     	; 0x3e2 <main+0x22>
		{		
			light_port &=~ (1<<L_Left);
 430:	dc 98       	cbi	0x1b, 4	; 27
			light_port |= (1<<L_Right);
 432:	db 9a       	sbi	0x1b, 3	; 27
			right_func();
 434:	0e 94 c2 01 	call	0x384	; 0x384 <right_func>
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	8f e4       	ldi	r24, 0x4F	; 79
 43c:	93 ec       	ldi	r25, 0xC3	; 195
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <main+0x7e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <main+0x88>
 448:	00 00       	nop
			_delay_ms(4000);
			BUFFER='f';
 44a:	d0 93 c2 00 	sts	0x00C2, r29
			light_port &=~ (1<<L_Right);
 44e:	db 98       	cbi	0x1b, 3	; 27
 450:	c8 cf       	rjmp	.-112    	; 0x3e2 <main+0x22>
		}
		else if (BUFFER=='q')
 452:	81 37       	cpi	r24, 0x71	; 113
 454:	39 f4       	brne	.+14     	; 0x464 <main+0xa4>
		{
			Stop_Flag=1;
 456:	c0 93 c0 00 	sts	0x00C0, r28
			stop_func();
 45a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <stop_func>
			Forward_Flag=0;
 45e:	10 92 c1 00 	sts	0x00C1, r1
 462:	bf cf       	rjmp	.-130    	; 0x3e2 <main+0x22>
		}
		else if ((BUFFER=='b')&&(Stop_Flag))
 464:	82 36       	cpi	r24, 0x62	; 98
 466:	09 f0       	breq	.+2      	; 0x46a <main+0xaa>
 468:	bc cf       	rjmp	.-136    	; 0x3e2 <main+0x22>
 46a:	80 91 c0 00 	lds	r24, 0x00C0
 46e:	88 23       	and	r24, r24
 470:	09 f4       	brne	.+2      	; 0x474 <main+0xb4>
 472:	b7 cf       	rjmp	.-146    	; 0x3e2 <main+0x22>
		{
			light_port &=~ (1<<L_Stop);
 474:	dd 98       	cbi	0x1b, 5	; 27
			light_port |= (1<<L_Back);
 476:	da 9a       	sbi	0x1b, 2	; 27
			backward_func();
 478:	0e 94 9f 01 	call	0x33e	; 0x33e <backward_func>
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	8f e4       	ldi	r24, 0x4F	; 79
 480:	93 ec       	ldi	r25, 0xC3	; 195
 482:	21 50       	subi	r18, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <main+0xc2>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <main+0xcc>
 48c:	00 00       	nop
			_delay_ms(4000);
			BUFFER='q';
 48e:	10 93 c2 00 	sts	0x00C2, r17
			light_port &=~ (1<<L_Back);
 492:	da 98       	cbi	0x1b, 2	; 27
			light_port |= (1<<L_Stop);
 494:	dd 9a       	sbi	0x1b, 5	; 27
 496:	a5 cf       	rjmp	.-182    	; 0x3e2 <main+0x22>

00000498 <__vector_13>:
	light_port &=~ (1<<L_Start);
	light_port |= (1<<L_Stop);
}

ISR (USART_RXC_vect)
{
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	8f 93       	push	r24
	light_port |= (1<<L_RX);
 4a4:	df 9a       	sbi	0x1b, 7	; 27
	BUFFER=UDR;
 4a6:	8c b1       	in	r24, 0x0c	; 12
 4a8:	80 93 c2 00 	sts	0x00C2, r24
	light_port &= ~(1<<L_RX);
 4ac:	df 98       	cbi	0x1b, 7	; 27
}
 4ae:	8f 91       	pop	r24
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__itoa_ncheck>:
 4ba:	bb 27       	eor	r27, r27
 4bc:	4a 30       	cpi	r20, 0x0A	; 10
 4be:	31 f4       	brne	.+12     	; 0x4cc <__itoa_ncheck+0x12>
 4c0:	99 23       	and	r25, r25
 4c2:	22 f4       	brpl	.+8      	; 0x4cc <__itoa_ncheck+0x12>
 4c4:	bd e2       	ldi	r27, 0x2D	; 45
 4c6:	90 95       	com	r25
 4c8:	81 95       	neg	r24
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__utoa_common>

000004d0 <__utoa_ncheck>:
 4d0:	bb 27       	eor	r27, r27

000004d2 <__utoa_common>:
 4d2:	fb 01       	movw	r30, r22
 4d4:	55 27       	eor	r21, r21
 4d6:	aa 27       	eor	r26, r26
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	aa 1f       	adc	r26, r26
 4de:	a4 17       	cp	r26, r20
 4e0:	10 f0       	brcs	.+4      	; 0x4e6 <__utoa_common+0x14>
 4e2:	a4 1b       	sub	r26, r20
 4e4:	83 95       	inc	r24
 4e6:	50 51       	subi	r21, 0x10	; 16
 4e8:	b9 f7       	brne	.-18     	; 0x4d8 <__utoa_common+0x6>
 4ea:	a0 5d       	subi	r26, 0xD0	; 208
 4ec:	aa 33       	cpi	r26, 0x3A	; 58
 4ee:	08 f0       	brcs	.+2      	; 0x4f2 <__utoa_common+0x20>
 4f0:	a9 5d       	subi	r26, 0xD9	; 217
 4f2:	a1 93       	st	Z+, r26
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	79 f7       	brne	.-34     	; 0x4d6 <__utoa_common+0x4>
 4f8:	b1 11       	cpse	r27, r1
 4fa:	b1 93       	st	Z+, r27
 4fc:	11 92       	st	Z+, r1
 4fe:	cb 01       	movw	r24, r22
 500:	0c 94 82 02 	jmp	0x504	; 0x504 <strrev>

00000504 <strrev>:
 504:	dc 01       	movw	r26, r24
 506:	fc 01       	movw	r30, r24
 508:	67 2f       	mov	r22, r23
 50a:	71 91       	ld	r23, Z+
 50c:	77 23       	and	r23, r23
 50e:	e1 f7       	brne	.-8      	; 0x508 <strrev+0x4>
 510:	32 97       	sbiw	r30, 0x02	; 2
 512:	04 c0       	rjmp	.+8      	; 0x51c <strrev+0x18>
 514:	7c 91       	ld	r23, X
 516:	6d 93       	st	X+, r22
 518:	70 83       	st	Z, r23
 51a:	62 91       	ld	r22, -Z
 51c:	ae 17       	cp	r26, r30
 51e:	bf 07       	cpc	r27, r31
 520:	c8 f3       	brcs	.-14     	; 0x514 <strrev+0x10>
 522:	08 95       	ret

00000524 <_exit>:
 524:	f8 94       	cli

00000526 <__stop_program>:
 526:	ff cf       	rjmp	.-2      	; 0x526 <__stop_program>
